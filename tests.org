#+STARTUP: showstars indent inlineimages
The order these are written in has two purposes:
1. If a bug is introduced, a fairly minimal example should be found by these tests.
2. If somebody else wants to use this project as an exercise, the
   tests will be presented in a reasonable order to perform TDD.
* Parser Tests - Part 1
Parse and display the parsed equation.  Introduces numbers, variables,
the "4 functions", and parenthesis.
** Basic
*** 00000001 Number
#+BEGIN_SRC scheme :tangle tests.d/00000001-parser-number.input
3
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000001-parser-number.output
3
#+END_SRC
*** 00000002 Variable
#+BEGIN_SRC scheme :tangle tests.d/00000002-parser-variable.input
a

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000002-parser-variable.output
a

#+END_SRC
*** 00000003 Sum
#+BEGIN_SRC scheme :tangle tests.d/00000003-parser-sum.input
1+2

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000003-parser-sum.output
1+2

#+END_SRC
*** 00000004 Difference
#+BEGIN_SRC scheme :tangle tests.d/00000004-parser-difference.input
2-1

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000004-parser-difference.output
2-1

#+END_SRC
*** 00000005 Product
#+BEGIN_SRC scheme :tangle tests.d/00000005-parser-prod.input
1*2

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000005-parser-prod.output
1*2

#+END_SRC
*** 00000006 Fraction
#+BEGIN_SRC scheme :tangle tests.d/00000006-parser-frac.input
1/2

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000006-parser-frac.output
1/2

#+END_SRC
** Parentheses
*** 00000007 Group
#+BEGIN_SRC scheme :tangle tests.d/00000007-parser-group.input
(1+1)/2

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000007-parser-group.output
(1+1)/2

#+END_SRC
*** 00000008 unGroup
#+BEGIN_SRC scheme :tangle tests.d/00000008-parser-ungroup.input
(1*2)+3

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000008-parser-ungroup.output
1*2+3

#+END_SRC
*** 00000009 unGroup 2
#+BEGIN_SRC scheme :tangle tests.d/00000009-parser-ungroup2.input
1+(2+3)

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000009-parser-ungroup2.output
1+2+3

#+END_SRC
*** 00000010 Group 2
#+BEGIN_SRC scheme :tangle tests.d/00000010-parser-group2.input
1-(2+3)

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000010-parser-group2.output
1-(2+3)

#+END_SRC
*** 00000011 unGroup 3
#+BEGIN_SRC scheme :tangle tests.d/00000011-parser-ungroup3.input
1-2+3

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000011-parser-ungroup3.output
1-2+3

#+END_SRC
*** 00000012 unGroup 4
#+BEGIN_SRC scheme :tangle tests.d/00000012-parser-ungroup4.input
1*(2*3)

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000012-parser-ungroup4.output
1*2*3

#+END_SRC
*** 00000013 Group 3
#+BEGIN_SRC scheme :tangle tests.d/00000013-parser-group3.input
1/(2*3)

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000013-parser-group3.output
1/(2*3)

#+END_SRC
*** 00000014 unGroup 5
#+BEGIN_SRC scheme :tangle tests.d/00000014-parser-ungroup5.input
1/2*3

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000014-parser-ungroup5.output
1/2*3

#+END_SRC
*** 00000015 unGroup 6
#+BEGIN_SRC scheme :tangle tests.d/00000015-parser-ungroup6.input
1-2*3

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000015-parser-ungroup6.output
1-2*3

#+END_SRC
** Basic With Vars
*** 00000016 Sum Variables
#+BEGIN_SRC scheme :tangle tests.d/00000016-parser-sum_vars.input
x+y

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000016-parser-sum_vars.output
x+y

#+END_SRC
*** 00000017 Difference Variables
#+BEGIN_SRC scheme :tangle tests.d/00000017-parser-difference_vars.input
x-y

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000017-parser-difference_vars.output
x-y

#+END_SRC
*** 00000018 Product Variables
#+BEGIN_SRC scheme :tangle tests.d/00000018-parser-prod_vars.input
x*y

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000018-parser-prod_vars.output
x*y

#+END_SRC
*** 00000019 Product Variables Without
#+BEGIN_SRC scheme :tangle tests.d/00000019-parser-prod_vars_without.input
xy

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000019-parser-prod_vars_without.output
x*y

#+END_SRC
*** 00000020 Product Variable with Number
#+BEGIN_SRC scheme :tangle tests.d/00000020-parser-prod_var_num.input
3x

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000020-parser-prod_var_num.output
3*x

#+END_SRC
*** 00000021 Fraction Variables
#+BEGIN_SRC scheme :tangle tests.d/00000021-parser-frac_vars.input
x/y

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000021-parser-frac_vars.output
x/y

#+END_SRC
*** 00000022 Fraction Variable Bottom
#+BEGIN_SRC scheme :tangle tests.d/00000022-parser-frac_var_bot.input
1/x

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000022-parser-frac_var_bot.output
1/x

#+END_SRC
*** 00000023 Fraction Variable Top
#+BEGIN_SRC scheme :tangle tests.d/00000023-parser-frac_var_top.input
x/2

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000023-parser-frac_var_top.output
x/2

#+END_SRC
** Number Features
*** 00000024 Negatives
#+BEGIN_SRC scheme :tangle tests.d/00000024-parser-negitive.input
-3

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000024-parser-negitive.output
-3

#+END_SRC
*** 00000025 Decimal
#+BEGIN_SRC scheme :tangle tests.d/00000025-parser-decimal.input
1.2

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000025-parser-decimal.output
1.2

#+END_SRC
** Variable Features
*** 00000026 Variable Names 1
#+BEGIN_SRC scheme :tangle tests.d/00000026-parser-var_names_1.input
x_1

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000026-parser-var_names_1.output
x_1

#+END_SRC
*** 00000027 Variable Names 2
#+BEGIN_SRC scheme :tangle tests.d/00000027-parser-var_names_2.input
x_{name}

#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00000027-parser-var_names_2.output
x_{name}

#+END_SRC
* Simplifyer Test - Part 1
Check for some basic simplification and arithmetic.
** 00001001 Number
#+BEGIN_SRC scheme :tangle tests.d/00001001-simplifyer-number.input
3
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001001-simplifyer-number.output
3
#+END_SRC
** Constant Reduction
Multiplying and adding zero and multiplying by one can be reduced.
*** 00001002 One Product 1
#+BEGIN_SRC scheme :tangle tests.d/00001002-simplifyer-one_prod.input
1*3
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001002-simplifyer-one_prod.output
3
#+END_SRC
*** 00001003 One Product 2
#+BEGIN_SRC scheme :tangle tests.d/00001003-simplifyer-one_prod_2.input
3*1
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001003-simplifyer-one_prod_2.output
3
#+END_SRC
*** 00001004 One Product 3
#+BEGIN_SRC scheme :tangle tests.d/00001004-simplifyer-one_prod_3.input
1*1*3*1*1
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001004-simplifyer-one_prod_3.output
3
#+END_SRC
*** 00001005 One Product 4
#+BEGIN_SRC scheme :tangle tests.d/00001005-simplifyer-one_prod_4.input
1*1*3*1*x*1
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001005-simplifyer-one_prod_4.output
3*x
#+END_SRC
*** 00001006 Zero Product 1
#+BEGIN_SRC scheme :tangle tests.d/00001006-simplifyer-zero_prod.input
0*3
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001006-simplifyer-zero_prod.output
0
#+END_SRC
*** 00001007 Zero Product 2
#+BEGIN_SRC scheme :tangle tests.d/00001007-simplifyer-zero_prod_2.input
3*0
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001007-simplifyer-zero_prod_2.output
0
#+END_SRC
*** 00001008 Zero Product 3
#+BEGIN_SRC scheme :tangle tests.d/00001008-simplifyer-zero_prod_3.input
1*1*3*1*0*1
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001008-simplifyer-zero_prod_3.output
0
#+END_SRC
*** 00001009 Zero Product 4
#+BEGIN_SRC scheme :tangle tests.d/00001009-simplifyer-zero_prod_4.input
1*0*3*1*x*1
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001009-simplifyer-zero_prod_4.output
0
#+END_SRC
*** 00001010 Zero Product 5
#+BEGIN_SRC scheme :tangle tests.d/00001010-simplifyer-zero_prod_5.input
0/x
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001010-simplifyer-zero_prod_5.output
0
#+END_SRC
*** 00001011 Zero Sum
#+BEGIN_SRC scheme :tangle tests.d/00001011-simplifyer-zero_sum.input
0+x
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001011-simplifyer-zero_sum.output
x
#+END_SRC
** Arithmetic Reduction
Simple arithmetic can be removed.
*** 00001012 Arithmetic 1
#+BEGIN_SRC scheme :tangle tests.d/00001012-simplifyer-arithmetic_1.input
1+2
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001012-simplifyer-arithmetic_1.output
3
#+END_SRC
*** 00001013 Arithmetic 2
#+BEGIN_SRC scheme :tangle tests.d/00001013-simplifyer-arithmetic_2.input
1+2+3
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001013-simplifyer-arithmetic_2.output
6
#+END_SRC
*** 00001014 Arithmetic 3
#+BEGIN_SRC scheme :tangle tests.d/00001014-simplifyer-arithmetic_3.input
1*2*3*4
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001014-simplifyer-arithmetic_3.output
24
#+END_SRC
*** 00001015 Arithmetic 4
#+BEGIN_SRC scheme :tangle tests.d/00001015-simplifyer-arithmetic_4.input
(1+2)*(3+4)
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001015-simplifyer-arithmetic_4.output
21
#+END_SRC
*** 00001016 Arithmetic 5
#+BEGIN_SRC scheme :tangle tests.d/00001016-simplifyer-arithmetic_5.input
(3*4)/(1+2)
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001016-simplifyer-arithmetic_5.output
4
#+END_SRC
*** 00001017 Arithmetic 6
#+BEGIN_SRC scheme :tangle tests.d/00001017-simplifyer-arithmetic_6.input
2-1
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001017-simplifyer-arithmetic_6.output
1
#+END_SRC
*** 00001018 Arithmetic 7
#+BEGIN_SRC scheme :tangle tests.d/00001018-simplifyer-arithmetic_7.input
0-x
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001018-simplifyer-arithmetic_7.output
-1*x
#+END_SRC
** Lexicographic Sorting
Sort sum terms in decreasing degree, sort product terms in increasing
order of variable name.
*** 00001019 Lexicographic Variables Order 1
#+BEGIN_SRC scheme :tangle tests.d/00001019-simplifyer-lex_var_1.input
x*3
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001019-simplifyer-lex_var_1.output
3*x
#+END_SRC
*** 00001020 Lexicographic Variables Order 2
#+BEGIN_SRC scheme :tangle tests.d/00001020-simplifyer-lex_var_2.input
y*x
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001020-simplifyer-lex_var_2.output
x*y
#+END_SRC
*** 00001021 Lexicographic Variables Order 3
#+BEGIN_SRC scheme :tangle tests.d/00001021-simplifyer-lex_var_3.input
x+2
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001021-simplifyer-lex_var_3.output
2+x
#+END_SRC
*** 00001022 Lexicographic Variables Order 4
#+BEGIN_SRC scheme :tangle tests.d/00001022-simplifyer-lex_var_4.input
y*x*2
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001022-simplifyer-lex_var_4.output
2*x*y
#+END_SRC
*** 00001023 Lexicographic Variables Order 5
#+BEGIN_SRC scheme :tangle tests.d/00001023-simplifyer-lex_var_5.input
y+x+2
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001023-simplifyer-lex_var_5.output
2+x+y
#+END_SRC
*** 00001024 Lexicographic Variables Order 6
#+BEGIN_SRC scheme :tangle tests.d/00001024-simplifyer-lex_var_6.input
y*x+x*2
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001024-simplifyer-lex_var_6.output
2*x+x*y
#+END_SRC
*** 00001025 Lexicographic Variables Order 7
#+BEGIN_SRC scheme :tangle tests.d/00001025-simplifyer-lex_var_7.input
(y+x)*(x+2)
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001025-simplifyer-lex_var_7.output
(2+x)*(x+y)
#+END_SRC
*** 00001026 Lexicographic Variables Order 8
#+BEGIN_SRC scheme :tangle tests.d/00001026-simplifyer-lex_var_8.input
0+(x+4)(x+y+0)(1*x+2)(x+-1*1)(0*x+4+7+y)(x+3-3)
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00001026-simplifyer-lex_var_8.output
x*(-1+x)*(2+x)*(4+x)*(11+y)*(x+y)
#+END_SRC
* Parser Tests - Part 2
Parse some simple named functions and constants:
** Common Operators
*** 00002001 Square Root
#+BEGIN_SRC scheme :tangle tests.d/00002001-parser-square_root.input
\sqrt{3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002001-parser-square_root.output
\sqrt{3}
#+END_SRC
*** 00002002 Square Root 2
#+BEGIN_SRC scheme :tangle tests.d/00002002-parser-square_root_2.input
\sqrt{-3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002002-parser-square_root_2.output
\sqrt{-3}
#+END_SRC
*** 00002003 Natural Log
#+BEGIN_SRC scheme :tangle tests.d/00002003-parser-ln.input
\ln{3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002003-parser-ln.output
\ln{3}
#+END_SRC
*** 00002004 Natural Log 2
#+BEGIN_SRC scheme :tangle tests.d/00002004-parser-ln.input
\ln{-3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002004-parser-ln.output
\ln{-3}
#+END_SRC
*** 00002005 Natural Log 3
#+BEGIN_SRC scheme :tangle tests.d/00002005-parser-ln.input
\ln{3/4}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002005-parser-ln.output
\ln{3/4}
#+END_SRC
*** 00002006 N-Root
#+BEGIN_SRC scheme :tangle tests.d/00002006-parser-n_root.input
\sqrt[4]{3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002006-parser-n_root.output
\sqrt[4]{3}
#+END_SRC
*** 00002007 N-Root 2
#+BEGIN_SRC scheme :tangle tests.d/00002007-parser-n_root_2.input
\sqrt[-4]{3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002007-parser-n_root_2.output
\sqrt[-4]{3}
#+END_SRC
*** 00002008 N-Root 3
#+BEGIN_SRC scheme :tangle tests.d/00002008-parser-n_root_3.input
\sqrt[4/2]{3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002008-parser-n_root_3.output
\sqrt[4/2]{3}
#+END_SRC
*** 00002009 Logarithm
#+BEGIN_SRC scheme :tangle tests.d/00002009-parser-log.input
\log_4{3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002009-parser-log.output
\log_4{3}
#+END_SRC
*** 00002010 Logarithm 2
#+BEGIN_SRC scheme :tangle tests.d/00002010-parser-log_2.input
\log_(4/2){3}
#+END_SRC
#+BEGIN_SRC scheme :tangle tests.d/00002010-parser-log_2.output
\log_(4/2){3}
#+END_SRC
